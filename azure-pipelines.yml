trigger: #  pipeline will auto run when any changes to the master branch are made
- master

# using ubuntu latest vmImage
pool:
  vmImage: 'ubuntu-latest'

pr: 'none'

#  For the operations related to sonar cloud to function properly
#  they must all be in the same job
#  The general order that they must follow is
#   - SonarCloudPrepare
#   - Build project
#   - Run test (generating code coverage at the same time)
#   - SonarCloudAnalyze
#   - SonarCloudPublish

stages:
  - stage:
    jobs:
      - job: 'build'
        steps:
          #  This task is the SonarCloudPrepare task.
          #  It is used to configure the SonarCloud service
          - task: SonarCloudPrepare@1
            inputs:
              #  This line sets the project being used on SonarCloud
              SonarCloud: 'SonarProj2'
              #  The SonarCloud organization that the project belongs to
              organization: 'testkey123456'
              #  The analysis tool that is being used.
              #  This is using MSBuild for the DotNetCore application being used
              scannerMode: 'MSBuild'
              #  This is the token that was generated and updated as the project key
              #  for the project in sonar cloud
              projectKey: '4f8fd6eb4b7919671a3cfbd7bf647e0d2cb7106d'
              #  The project name being used
              projectName: 'testDevOpsPipeline'
              #  The sonar.exclusions are those files in our application
              #   that we do not want included in the sonar cloud analysis
              #  We set the branch name so that sonar cloud has the same branch name as azure?
              #  vstest.reportsPaths indicates the file path of the test results
              #  opencover.reportsPaths indicates the file path of the code coverage reports
              #   generated by the coverlet.msbuild tool
              extraProperties: |
                sonar.exclusions=**/obj/**,**/*.dll 
                sonar.branch.name=$(Build.SourceBranchName)
                sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
                sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/*.xml
            #  The build script build the project.
            #  The file path must be entered in as relative to the azure-pipelines.yml file
            #   location in the repo
          - script: dotnet build 'Project2\MusicShop.UI\MusicShop.UI.csproj'
          #  This task is a DotNetCoreCLI version 2 task
          - task: DotNetCoreCLI@2
            #  The display name sets the displayed name of the task
            #   during the pipeline execution
            displayName: Test Execution
            inputs:
              #  The command for this DotNetCore task is test
              #  This will run all of the tests in our project
              command: 'test'
              #  The arguments are the command parameters
              #  The test configurations are buing set here
              #  CollectCoverage=true activates the coverlet.msbuild tool and generates the code coverage report
              #  CoverletOutputFormat=opencover indicates that we want the format to use opencover
              #    This is very important! Most of the documentation will say to 
              #    set the format to Cobertura as seen in the following link.
              #    https://www.tonyranieri.com/blog/2019/07/31/Measuring-.NET-Core-Test-Coverage-with-Coverlet/
              #    However, doing so will result in no
              #    analysis by the sonar cloud tools.
              #    The only help that I found indicating this should be opencover is at the following link
              #    https://www.jesperbrannstrom.com/using-sonarcloud-in-azure-pipelines/
              #  Coverletoutput indicates the folder where the code coverage results should be placed
              #  --logger trx generates the test results file
              arguments: '--configuration $(BuildConfiguration) 
                /p:CollectCoverage=true 
                /p:CoverletOutputFormat=opencover 
                /p:Coverletoutput=$(Build.SourcesDirector)/TestResults/Coverage 
                --logger trx'
              #  Project indicates the test project that will be run by the test command
              projects: '**/*Project2/MusicShop.Tests.csproj'
              #  nobuild=true sets it to not auto build
              nobuild: true
          #  The PublishCodeCoverageResults@1 is the internal Azure DevOps 
          #   task to show the results of code coverage after the pipeline has run

          - task: DotNetCoreCLI@2
            inputs:
              command: 'test'
              arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx'
              projects: '**/*Project2/MusicShop.Tests.csproj'
              testRunTitle: 'dotnet test'
          - task: PublishCodeCoverageResults@1
            #  The display name sets the displayed name of the task
            #   during the pipeline execution
            displayName: 'Publish Code Coverage'
            inputs:
              #  The code coverage tool used is Cobertura coverlet
              codeCoverageTool: Cobertura
              #  summaryFileLocation is the file path to the code coverage report generated during
              #   the test task
              summaryFileLocation: '$(Build.SourcesDirectory)/**/*.xml'
              #  The report directory is the folder location of the reports
              reportDirectory: '$(Build.SourcesDirectory)'   
          #  The SonarCloudAnalyze task runs the sonar cloud tool to analze the project and resulting reports           
          - task: SonarCloudAnalyze@1
          #  SonarCloudPublish publishes the sonar analysis results to sonar cloud
          - task: SonarCloudPublish@1
          #  dotnet publish publishes the proj to a given location. In this case it is to the github repo
          - script: dotnet publish 'Project2/MusicShop.sln'